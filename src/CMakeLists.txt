project(dpacalc)

cmake_minimum_required(VERSION 2.6)
set(CMAKE_MODULE_PATH ${CMAKE_MODULE_PATH} ${CMAKE_SOURCE_DIR}/../cmake)
INCLUDE (${CMAKE_SOURCE_DIR}/../dpacalc-config.cmake)

find_package(Eigen 3.2.0 REQUIRED)
find_package(TCLAP REQUIRED)
find_package(Boost REQUIRED)
set( CMAKE_CXX_FLAGS "-std=c++0x -Wall -Werror -Wno-uninitialized ${CONFIG_DEBUG_OPTIONS} ${CONFIG_OPTIMIZATION_OPTIONS}")
execute_process( COMMAND gcc -dumpversion OUTPUT_VARIABLE CXX_VERSION )
IF ( ${CMAKE_COMPILER_IS_GNUCXX} )
IF ( ${CXX_VERSION} VERSION_GREATER 4.8.0 OR ${CXX_VERSION} VERSION_EQUAL 4.8.0)
set( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -Wno-unused-local-typedefs")
ENDIF ( ${CXX_VERSION} VERSION_GREATER 4.8.0 OR ${CXX_VERSION} VERSION_EQUAL 4.8.0)
ENDIF ( ${CMAKE_COMPILER_IS_GNUCXX} )
set(inputsources input/${CONFIG_CLASS_INPUT}.cpp)
set(filtersources filter/${CONFIG_CLASS_FILTER}.cpp)
set(keygensources keygen/${CONFIG_CLASS_KEYGEN}.cpp)
set(intermediatesources gen_intermediate/${CONFIG_CLASS_INTERMEDIATE}.cpp)
set(powermodelsources gen_powermodel/${CONFIG_CLASS_POWERMODEL}.cpp)
set(statisticsources statisticaltest/${CONFIG_CLASS_STATISTIC}.cpp)
set(execsources exec/${CONFIG_CLASS_EXEC}.cpp)
set(outputsources output/${CONFIG_CLASS_OUTPUT}.cpp)

set(inputprogsources input_prog/${CONFIG_CLASS_INPUT_PROG}.cpp)
set(filterprogsources filter_prog/${CONFIG_CLASS_FILTER_PROG}.cpp)
set(intermediateprogsources gen_intermediate_prog/${CONFIG_CLASS_INTERMEDIATE_PROG}.cpp)
set(powermodelprogsources gen_powermodel_prog/${CONFIG_CLASS_POWERMODEL_PROG}.cpp)
set(statisticsprogources statisticaltest_prog/${CONFIG_CLASS_STATISTIC_PROG}.cpp)
set(outputprogsources output_prog/${CONFIG_CLASS_OUTPUT_PROG}.cpp)

set(inputfindsources input_find/${CONFIG_CLASS_INPUT_FIND}.cpp)
set(filterfindsources filter_find/${CONFIG_CLASS_FILTER_FIND}.cpp)
set(outputfindsources output_find/${CONFIG_CLASS_OUTPUT_FIND}.cpp)
set(verificationsources verification/${CONFIG_CLASS_VERIFICATION}.cpp)

include( input/${CONFIG_CLASS_INPUT}.cmake OPTIONAL )
include( input_prog/${CONFIG_CLASS_INPUT_PROG}.cmake OPTIONAL )
include( input_find/${CONFIG_CLASS_INPUT_FIND}.cmake OPTIONAL )
include( filter/${CONFIG_CLASS_FILTER}.cmake OPTIONAL )
include( filter_prog/${CONFIG_CLASS_FILTER_PROG}.cmake OPTIONAL )
include( keygen/${CONFIG_CLASS_KEYGEN}.cmake OPTIONAL )
include( gen_intermediate/${CONFIG_CLASS_INTERMEDIATE}.cmake OPTIONAL )
include( gen_intermediate_prog/${CONFIG_CLASS_INTERMEDIATE_PROG}.cmake OPTIONAL )
include( gen_powermodel/${CONFIG_CLASS_POWERMODEL}.cmake OPTIONAL )
include( gen_powermodel_prog/${CONFIG_CLASS_POWERMODEL_PROG}.cmake OPTIONAL )
include( statisticaltest/${CONFIG_CLASS_STATISTIC}.cmake OPTIONAL )
include( statisticaltest_prog/${CONFIG_CLASS_STATISTIC_PROG}.cmake OPTIONAL )
include( exec/${CONFIG_CLASS_EXEC}.cmake OPTIONAL )
include( output/${CONFIG_CLASS_OUTPUT}.cmake OPTIONAL )
include( output_prog/${CONFIG_CLASS_OUTPUT_PROG}.cmake OPTIONAL )
include( filter_find/${CONFIG_CLASS_FILTER_FIND}.cmake OPTIONAL )
include( output_find/${CONFIG_CLASS_OUTPUT_FIND}.cmake OPTIONAL )
include( verification/${CONFIG_CLASS_VERIFICATION}.cmake OPTIONAL )


include_directories(${EIGEN_INCLUDE_DIRS} ${TCLAP_INCLUDE_DIR} ${Boost_INCLUDE_DIR} ${CMAKE_SOURCE_DIR} ${DPACALC_EXTRA_INCLUDES})
configure_file( config.h.in ${CMAKE_SOURCE_DIR}/config.h)
configure_file( includes.h.in ${CMAKE_SOURCE_DIR}/includes.h)
set(DPACALC_SRCS utils.cpp dpacalc.cpp ${inputsources} ${filtersources} ${keygensources} ${intermediatesources} ${powermodelsources} ${statisticsources} ${execsources}  ${outputsources} )
set(DPACALC_PROG_SRCS utils.cpp dpacalc_prog.cpp ${inputprogsources} ${filterprogsources} ${keygensources} ${intermediateprogsources} ${powermodelprogsources} ${statisticsprogources} ${execsources}  ${outputprogsources} )
set(DPACALC_FIND_SRCS utils.cpp dpacalc_findfilter.cpp ${inputfindsources} ${filterfindsources} ${keygensources} ${intermediateprogsources} ${powermodelprogsources} ${statisticsprogources} ${execsources}  ${outputfindsources} ${verificationsources})
add_executable(dpacalc ${DPACALC_SRCS})
add_executable(dpacalc_prog ${DPACALC_PROG_SRCS})
add_executable(dpacalc_findfilter ${DPACALC_FIND_SRCS})
target_link_libraries(dpacalc ${DPACALC_EXTRA_LIBS} ${Boost_LIBRARIES})
target_link_libraries(dpacalc_prog ${DPACALC_EXTRA_LIBS} ${Boost_LIBRARIES})
target_link_libraries(dpacalc_findfilter ${DPACALC_EXTRA_LIBS} ${Boost_LIBRARIES})
